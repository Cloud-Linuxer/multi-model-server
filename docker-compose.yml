# Docker Compose configuration for multi-model serving

services:
  qwen-model:
    build:
      context: .
      dockerfile: docker/Dockerfile.qwen
    container_name: qwen-3b
    ports:
      - "8001:8001"
    volumes:
      - ~/.cache/huggingface:/root/.cache/huggingface
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - CUDA_VISIBLE_DEVICES=0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - model-network

  llama-model:
    build:
      context: .
      dockerfile: docker/Dockerfile.llama
    container_name: llama-3b
    ports:
      - "8002:8002"
    volumes:
      - ~/.cache/huggingface:/root/.cache/huggingface
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - CUDA_VISIBLE_DEVICES=0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - model-network

  gemma-model:
    build:
      context: .
      dockerfile: docker/Dockerfile.gemma
    container_name: gemma-2b
    ports:
      - "8003:8003"
    volumes:
      - ~/.cache/huggingface:/root/.cache/huggingface
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - NVIDIA_VISIBLE_DEVICES=0
      - CUDA_VISIBLE_DEVICES=0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - model-network

  nginx:
    image: nginx:alpine
    container_name: model-loadbalancer
    ports:
      - "8000:80"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - qwen-model
      - llama-model
      - gemma-model
    restart: unless-stopped
    networks:
      - model-network

  api-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - QWEN_URL=http://qwen-model:8001
      - LLAMA_URL=http://llama-model:8002
      - GEMMA_URL=http://gemma-model:8003
    depends_on:
      - qwen-model
      - llama-model
      - gemma-model
    restart: unless-stopped
    networks:
      - model-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - model-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/var/lib/grafana/dashboards/dashboard.json
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - model-network

  redis:
    image: redis:alpine
    container_name: model-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - model-network

networks:
  model-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  redis_data: